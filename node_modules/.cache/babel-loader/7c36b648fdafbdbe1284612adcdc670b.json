{"ast":null,"code":"var _jsxFileName = \"/home/ascratech/projects/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // import App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nfunction Welcome(props) {\n  return React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \" Hello, \", props.name, \" \");\n}\n\nconst scaleNames = {\n  c: 'Celsius',\n  f: 'Fahrenheit'\n};\n\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return celsius * 9 / 5 + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n\n  if (Number.isNaN(input)) {\n    return '';\n  }\n\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n\nfunction BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"The water would boil.\");\n  }\n\n  return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"The water would not boil.\");\n}\n\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"legend\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Enter temperature in \", scaleNames[scale], \":\"), React.createElement(\"input\", {\n      value: temperature,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {\n      temperature: '',\n      scale: 'c'\n    };\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({\n      scale: 'c',\n      temperature\n    });\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({\n      scale: 'f',\n      temperature\n    });\n  }\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(TemperatureInput, {\n      scale: \"c\",\n      temperature: celsius,\n      onTemperatureChange: this.handleCelsiusChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(TemperatureInput, {\n      scale: \"f\",\n      temperature: fahrenheit,\n      onTemperatureChange: this.handleFahrenheitChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(BoilingVerdict, {\n      celsius: parseFloat(celsius),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(Calculator, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 104\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/ascratech/projects/my-app/src/index.js"],"names":["React","ReactDOM","serviceWorker","Welcome","props","name","scaleNames","c","f","toCelsius","fahrenheit","toFahrenheit","celsius","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","rounded","Math","round","toString","BoilingVerdict","TemperatureInput","Component","constructor","handleChange","bind","e","onTemperatureChange","target","value","render","scale","Calculator","handleCelsiusChange","handleFahrenheitChange","state","setState","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction Welcome(props) {\n  return <h1> Hello, {props.name} </h1>;\n}\n\nconst scaleNames = {\n  c: 'Celsius',\n  f: 'Fahrenheit'\n};\n\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return (celsius * 9 / 5) + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return '';\n  }\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n\nfunction BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return <p>The water would boil.</p>;\n  }\n  return <p>The water would not boil.</p>;\n}\n\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {temperature: '', scale: 'c'};\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({scale: 'c', temperature});\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({scale: 'f', temperature});\n  }\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n\n    return (\n      <div>\n        <TemperatureInput\n          scale=\"c\"\n          temperature={celsius}\n          onTemperatureChange={this.handleCelsiusChange} />\n        <TemperatureInput\n          scale=\"f\"\n          temperature={fahrenheit}\n          onTemperatureChange={this.handleFahrenheitChange} />\n        <BoilingVerdict\n          celsius={parseFloat(celsius)} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Calculator />,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}