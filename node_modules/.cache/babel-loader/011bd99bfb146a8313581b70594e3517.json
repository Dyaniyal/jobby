{"ast":null,"code":"var _jsxFileName = \"/home/ascratech/projects/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // import App from './App';\n\nimport * as serviceWorker from './serviceWorker';\nconst ThemeContext = React.createContext('light');\n\nclass App extends React.Component {\n  render() {\n    // Use a Provider to pass the current theme to the tree below.\n    // Any component can read it, no matter how deep it is.\n    // In this example, we're passing \"dark\" as the current value.\n    return React.createElement(ThemeContext.Provider, {\n      value: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }));\n  }\n\n} // A component in the middle doesn't have to\n// pass the theme down explicitly anymore.\n\n\nfunction Toolbar(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(ThemedButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n}\n\nfunction Button(props) {\n  return React.createElement(\"button\", {\n    type: \"button\",\n    theme: props.theme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \" \");\n}\n\nclass ThemedButton extends React.Component {\n  // Assign a contextType to read the current theme context.\n  // React will find the closest theme Provider above and use its value.\n  // In this example, the current theme is \"dark\".\n  render() {\n    return React.createElement(Button, {\n      theme: ThemeContext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    });\n  }\n\n}\n\nThemedButton.contextType = ThemeContext;\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/ascratech/projects/my-app/src/index.js"],"names":["React","ReactDOM","serviceWorker","ThemeContext","createContext","App","Component","render","Toolbar","props","Button","theme","ThemedButton","contextType","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP,C,CACA;;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AAEA,MAAMC,YAAY,GAAGH,KAAK,CAACI,aAAN,CAAoB,OAApB,CAArB;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAChCC,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA,WACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAV+B,C,CAalC;AACA;;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,SAASC,MAAT,CAAiBD,KAAjB,EAAwB;AACtB,SACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,KAAK,EAAEA,KAAK,CAACE,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAGD;;AAED,MAAMC,YAAN,SAA2BZ,KAAK,CAACM,SAAjC,CAA2C;AACzC;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AACP,WAAO,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEJ,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAPwC;;AAArCS,Y,CAIGC,W,GAAcV,Y;AAMvBF,QAAQ,CAACM,MAAT,CACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEEO,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF,E,CAKA;AACA;AACA;;AACAb,aAAa,CAACc,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst ThemeContext = React.createContext('light');\n\nclass App extends React.Component {\n  render() {\n    // Use a Provider to pass the current theme to the tree below.\n    // Any component can read it, no matter how deep it is.\n    // In this example, we're passing \"dark\" as the current value.\n    return (\n      <ThemeContext.Provider value=\"dark\">\n        <Toolbar />\n      </ThemeContext.Provider>\n    );\n  }\n}\n\n// A component in the middle doesn't have to\n// pass the theme down explicitly anymore.\nfunction Toolbar(props) {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n}\n\nfunction Button (props) {\n  return (\n    <button type=\"button\" theme={props.theme}> </button>\n  );\n}\n\nclass ThemedButton extends React.Component {\n  // Assign a contextType to read the current theme context.\n  // React will find the closest theme Provider above and use its value.\n  // In this example, the current theme is \"dark\".\n  static contextType = ThemeContext;\n  render() {\n    return <Button theme={ThemeContext} />;\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}